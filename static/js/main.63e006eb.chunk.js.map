{"version":3,"sources":["api/todolists-api.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/auth-reducer.ts","features/login/login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isLoggedIn","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","display","justifyContent","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","isInitialized","setIsLoggedInAC","setIsInitializedAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","FormControl","FormLabel","FormGroup","flexDirection","handleSubmit","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","width","height","textDecoration","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63e006eb.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '29b8c3f6-3989-47ac-8b51-b97568488b2d'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:AuthLoginType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`/auth/login`)\r\n    }\r\n}\r\n\r\nexport type AuthLoginType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [props.todolist.id, dispatch, demo])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px', display:\"flex\", justifyContent:\"center\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid style={{display:\"flex\", justifyContent:\"space-evenly\"}} container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, AuthLoginType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isInitialized: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-INITIALIZED-APP':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\nexport const setIsInitializedAC = (value:boolean) => ({type: 'login/SET-INITIALIZED-APP', value} as const)\r\n\r\nexport const loginTC = (data: AuthLoginType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsInitializedAC(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally( () => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType | ReturnType<typeof setIsInitializedAC>","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Поле email обязательно !!';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Невалидный email';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Поле password обязательно !!';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Короткий пароль! Минимум 3 символа';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm();\r\n            dispatch(loginTC(formik.values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <form style={{display:\"flex\", flexDirection:\"column\"}} onSubmit={formik.handleSubmit}>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('remeberMe')}\r\n                        />\r\n                        <Button type='submit' variant={'contained'} color={'primary'}>Login</Button>\r\n                    </form>\r\n                </FormGroup>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport {NavLink, Redirect, Route, Switch } from 'react-router-dom'\r\nimport {Login} from \"../features/login/login\";\r\nimport {initializeAppTC, logoutTC} from '../features/login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch=useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType>(state => state.auth.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    useEffect(()=> {\r\n        dispatch(initializeAppTC())\r\n    },[dispatch])\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    const onClickLogout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {!isLoggedIn && <Button color=\"inherit\"><NavLink style={{width:'100%', height:\"100%\", color: 'white', textDecoration: 'none'}} to={'/login'}>Log In</NavLink></Button>}\r\n                    {isLoggedIn && <Button onClick={onClickLogout} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n             { status === 'loading' &&  <LinearProgress /> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={\"/\"} render={()=><TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} render={()=><Login/>}/>\r\n                    <Route path={'/404'} render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    <Redirect from={ '*' } to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n            <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}